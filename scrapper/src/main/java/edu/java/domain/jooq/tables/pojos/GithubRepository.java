/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.tables.pojos;


import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;
import java.io.Serializable;
import java.time.OffsetDateTime;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class GithubRepository implements Serializable {

    private static final long serialVersionUID = 1L;

    private Long repositoryId;
    private Long linkId;
    private String fullName;
    private Integer forksCount;
    private OffsetDateTime updatedAt;

    public GithubRepository() {}

    public GithubRepository(GithubRepository value) {
        this.repositoryId = value.repositoryId;
        this.linkId = value.linkId;
        this.fullName = value.fullName;
        this.forksCount = value.forksCount;
        this.updatedAt = value.updatedAt;
    }

    @ConstructorProperties({ "repositoryId", "linkId", "fullName", "forksCount", "updatedAt" })
    public GithubRepository(
        @NotNull Long repositoryId,
        @Nullable Long linkId,
        @NotNull String fullName,
        @NotNull Integer forksCount,
        @Nullable OffsetDateTime updatedAt
    ) {
        this.repositoryId = repositoryId;
        this.linkId = linkId;
        this.fullName = fullName;
        this.forksCount = forksCount;
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for <code>GITHUB_REPOSITORY.REPOSITORY_ID</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getRepositoryId() {
        return this.repositoryId;
    }

    /**
     * Setter for <code>GITHUB_REPOSITORY.REPOSITORY_ID</code>.
     */
    public void setRepositoryId(@NotNull Long repositoryId) {
        this.repositoryId = repositoryId;
    }

    /**
     * Getter for <code>GITHUB_REPOSITORY.LINK_ID</code>.
     */
    @Nullable
    public Long getLinkId() {
        return this.linkId;
    }

    /**
     * Setter for <code>GITHUB_REPOSITORY.LINK_ID</code>.
     */
    public void setLinkId(@Nullable Long linkId) {
        this.linkId = linkId;
    }

    /**
     * Getter for <code>GITHUB_REPOSITORY.FULL_NAME</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 1000000000)
    @NotNull
    public String getFullName() {
        return this.fullName;
    }

    /**
     * Setter for <code>GITHUB_REPOSITORY.FULL_NAME</code>.
     */
    public void setFullName(@NotNull String fullName) {
        this.fullName = fullName;
    }

    /**
     * Getter for <code>GITHUB_REPOSITORY.FORKS_COUNT</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Integer getForksCount() {
        return this.forksCount;
    }

    /**
     * Setter for <code>GITHUB_REPOSITORY.FORKS_COUNT</code>.
     */
    public void setForksCount(@NotNull Integer forksCount) {
        this.forksCount = forksCount;
    }

    /**
     * Getter for <code>GITHUB_REPOSITORY.UPDATED_AT</code>.
     */
    @Nullable
    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>GITHUB_REPOSITORY.UPDATED_AT</code>.
     */
    public void setUpdatedAt(@Nullable OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final GithubRepository other = (GithubRepository) obj;
        if (this.repositoryId == null) {
            if (other.repositoryId != null)
                return false;
        }
        else if (!this.repositoryId.equals(other.repositoryId))
            return false;
        if (this.linkId == null) {
            if (other.linkId != null)
                return false;
        }
        else if (!this.linkId.equals(other.linkId))
            return false;
        if (this.fullName == null) {
            if (other.fullName != null)
                return false;
        }
        else if (!this.fullName.equals(other.fullName))
            return false;
        if (this.forksCount == null) {
            if (other.forksCount != null)
                return false;
        }
        else if (!this.forksCount.equals(other.forksCount))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        }
        else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.repositoryId == null) ? 0 : this.repositoryId.hashCode());
        result = prime * result + ((this.linkId == null) ? 0 : this.linkId.hashCode());
        result = prime * result + ((this.fullName == null) ? 0 : this.fullName.hashCode());
        result = prime * result + ((this.forksCount == null) ? 0 : this.forksCount.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("GithubRepository (");

        sb.append(repositoryId);
        sb.append(", ").append(linkId);
        sb.append(", ").append(fullName);
        sb.append(", ").append(forksCount);
        sb.append(", ").append(updatedAt);

        sb.append(")");
        return sb.toString();
    }
}
