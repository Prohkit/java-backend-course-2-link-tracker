/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.tables.records;


import edu.java.domain.jooq.tables.GithubRepository;

import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;
import java.time.OffsetDateTime;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class GithubRepositoryRecord extends TableRecordImpl<GithubRepositoryRecord> implements Record5<Long, Long, String, Integer, OffsetDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>GITHUB_REPOSITORY.REPOSITORY_ID</code>.
     */
    public void setRepositoryId(@NotNull Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>GITHUB_REPOSITORY.REPOSITORY_ID</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getRepositoryId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>GITHUB_REPOSITORY.LINK_ID</code>.
     */
    public void setLinkId(@Nullable Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>GITHUB_REPOSITORY.LINK_ID</code>.
     */
    @Nullable
    public Long getLinkId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>GITHUB_REPOSITORY.FULL_NAME</code>.
     */
    public void setFullName(@NotNull String value) {
        set(2, value);
    }

    /**
     * Getter for <code>GITHUB_REPOSITORY.FULL_NAME</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 1000000000)
    @NotNull
    public String getFullName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>GITHUB_REPOSITORY.FORKS_COUNT</code>.
     */
    public void setForksCount(@NotNull Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>GITHUB_REPOSITORY.FORKS_COUNT</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Integer getForksCount() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>GITHUB_REPOSITORY.UPDATED_AT</code>.
     */
    public void setUpdatedAt(@Nullable OffsetDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>GITHUB_REPOSITORY.UPDATED_AT</code>.
     */
    @Nullable
    public OffsetDateTime getUpdatedAt() {
        return (OffsetDateTime) get(4);
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row5<Long, Long, String, Integer, OffsetDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row5<Long, Long, String, Integer, OffsetDateTime> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<Long> field1() {
        return GithubRepository.GITHUB_REPOSITORY.REPOSITORY_ID;
    }

    @Override
    @NotNull
    public Field<Long> field2() {
        return GithubRepository.GITHUB_REPOSITORY.LINK_ID;
    }

    @Override
    @NotNull
    public Field<String> field3() {
        return GithubRepository.GITHUB_REPOSITORY.FULL_NAME;
    }

    @Override
    @NotNull
    public Field<Integer> field4() {
        return GithubRepository.GITHUB_REPOSITORY.FORKS_COUNT;
    }

    @Override
    @NotNull
    public Field<OffsetDateTime> field5() {
        return GithubRepository.GITHUB_REPOSITORY.UPDATED_AT;
    }

    @Override
    @NotNull
    public Long component1() {
        return getRepositoryId();
    }

    @Override
    @Nullable
    public Long component2() {
        return getLinkId();
    }

    @Override
    @NotNull
    public String component3() {
        return getFullName();
    }

    @Override
    @NotNull
    public Integer component4() {
        return getForksCount();
    }

    @Override
    @Nullable
    public OffsetDateTime component5() {
        return getUpdatedAt();
    }

    @Override
    @NotNull
    public Long value1() {
        return getRepositoryId();
    }

    @Override
    @Nullable
    public Long value2() {
        return getLinkId();
    }

    @Override
    @NotNull
    public String value3() {
        return getFullName();
    }

    @Override
    @NotNull
    public Integer value4() {
        return getForksCount();
    }

    @Override
    @Nullable
    public OffsetDateTime value5() {
        return getUpdatedAt();
    }

    @Override
    @NotNull
    public GithubRepositoryRecord value1(@NotNull Long value) {
        setRepositoryId(value);
        return this;
    }

    @Override
    @NotNull
    public GithubRepositoryRecord value2(@Nullable Long value) {
        setLinkId(value);
        return this;
    }

    @Override
    @NotNull
    public GithubRepositoryRecord value3(@NotNull String value) {
        setFullName(value);
        return this;
    }

    @Override
    @NotNull
    public GithubRepositoryRecord value4(@NotNull Integer value) {
        setForksCount(value);
        return this;
    }

    @Override
    @NotNull
    public GithubRepositoryRecord value5(@Nullable OffsetDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    @NotNull
    public GithubRepositoryRecord values(@NotNull Long value1, @Nullable Long value2, @NotNull String value3, @NotNull Integer value4, @Nullable OffsetDateTime value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GithubRepositoryRecord
     */
    public GithubRepositoryRecord() {
        super(GithubRepository.GITHUB_REPOSITORY);
    }

    /**
     * Create a detached, initialised GithubRepositoryRecord
     */
    @ConstructorProperties({ "repositoryId", "linkId", "fullName", "forksCount", "updatedAt" })
    public GithubRepositoryRecord(@NotNull Long repositoryId, @Nullable Long linkId, @NotNull String fullName, @NotNull Integer forksCount, @Nullable OffsetDateTime updatedAt) {
        super(GithubRepository.GITHUB_REPOSITORY);

        setRepositoryId(repositoryId);
        setLinkId(linkId);
        setFullName(fullName);
        setForksCount(forksCount);
        setUpdatedAt(updatedAt);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised GithubRepositoryRecord
     */
    public GithubRepositoryRecord(edu.java.domain.jooq.tables.pojos.GithubRepository value) {
        super(GithubRepository.GITHUB_REPOSITORY);

        if (value != null) {
            setRepositoryId(value.getRepositoryId());
            setLinkId(value.getLinkId());
            setFullName(value.getFullName());
            setForksCount(value.getForksCount());
            setUpdatedAt(value.getUpdatedAt());
            resetChangedOnNotNull();
        }
    }
}
